// <auto-generated />
using System;
using DataService.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221120071856_DQBResponseTableUpdated")]
    partial class DQBResponseTableUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreDomain.DataModels.Internal.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AssignedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedLocationLatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ControlType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedLocationLatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("O1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q10a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q10b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q10c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q10d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q10e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q10f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q11a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q11b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q11c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q11d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q11e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q11f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q12a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q12b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q12c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q12d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q12e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q12f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q13a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q13b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q13c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q13d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q13e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q13f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q14a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q14b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q14c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q14d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q14e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q14f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q15a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q15b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q15c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q15d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q15e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q15f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q16a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q16b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q16c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q16d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q16e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q16f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q17a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q17b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q17c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q17d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q17e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q17f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q18a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q18b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q18c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q18d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q18e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q18f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q19a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q19b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q19c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q19d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q19e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q19f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q20a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q20b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q20c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q20d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q20e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q20f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q21a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q21b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q21c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q21d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q21e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q21f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q22a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q22b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q22c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q22d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q22e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q22f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q23a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q23b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q23c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q23d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q23e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q23f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q24a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q24b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q24c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q24d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q24e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q24f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q6a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q6b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q6c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q6d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q6e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q6f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q7a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q7b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q7c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q7d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q7e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q7f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q8a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q8b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q8c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q8d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q8e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q8f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q9a")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q9b")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q9c")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q9d")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q9e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Q9f")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurveyStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.UserResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatLong")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurveyStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserResponses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.Answer", b =>
                {
                    b.HasOne("CoreDomain.DataModels.Questionnaire.Question", "Question")
                        .WithMany("Answer")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.Question", b =>
                {
                    b.HasOne("CoreDomain.DataModels.Questionnaire.QuestionType", "QuestionType")
                        .WithMany("Qustion")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.Response", b =>
                {
                    b.HasOne("CoreDomain.DataModels.Internal.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.UserResponse", b =>
                {
                    b.HasOne("CoreDomain.DataModels.Questionnaire.Answer", "Answer")
                        .WithMany("UserResponse")
                        .HasForeignKey("AnswerId");

                    b.HasOne("CoreDomain.DataModels.Questionnaire.Question", "Question")
                        .WithMany("UserResponse")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreDomain.DataModels.Internal.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoreDomain.DataModels.Internal.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoreDomain.DataModels.Internal.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreDomain.DataModels.Internal.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoreDomain.DataModels.Internal.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.Answer", b =>
                {
                    b.Navigation("UserResponse");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.Question", b =>
                {
                    b.Navigation("Answer");

                    b.Navigation("UserResponse");
                });

            modelBuilder.Entity("CoreDomain.DataModels.Questionnaire.QuestionType", b =>
                {
                    b.Navigation("Qustion");
                });
#pragma warning restore 612, 618
        }
    }
}
